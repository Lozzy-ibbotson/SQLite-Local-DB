using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Common;
using System.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Sqlite_EF_Tester.Models;
//using System.Data.SQLite;
using System.Diagnostics;

namespace v4._8_Sqlite_Tester.Models
{
    public partial class SqliteDbContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public SqliteDbContext()
        {
            Debug.WriteLine("SqliteDbContext instantiated");

            //defined here only for testing purposes - database connection string defined as standard in the app.config file
            //DbPath = "v48 sqlite_db.db";
        }

        public SqliteDbContext(DbContextOptions<SqliteDbContext> options)
            : base(options)
        {
        }

        /*
        // override Dispose with any additional resources to clean up
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // Dispose managed resources here
            }
            base.Dispose(disposing);
        }
        */

        public string DbPath { get; }

        // *Note: fille 'Microsoft.EntityFrameworkCore.' path is required
        // due to ambiguity between this reference and the 'System.Data.Entity'
        // ; with both namespaces being used in this file, as both contain the DbSet property. 

        public virtual Microsoft.EntityFrameworkCore.DbSet<Coordinate> Coordinates { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Hotspot> Hotspots { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Level> Levels { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<LinkZone> LinkZones { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Location> Locations { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Plan> Plans { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Site> Sites { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<View> Views { get; set; }

        public virtual Microsoft.EntityFrameworkCore.DbSet<Zone> Zones { get; set; }

        /* // OG code generated by EF, kept for reference
        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            options.UseSqlite($"Data Source={DbPath}");
        }
        */

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var connectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                optionsBuilder.UseSqlite(connectionString);

                Debug.WriteLine("SqliteDbContext connection string successfully configured ");
            }
        }

             //optionsBuilder.UseSqlite(connectionString);
        // #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        //        => optionsBuilder.UseSqlite("Data Source=sqlite_db.db");
        // }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            Debug.WriteLine("SqliteDbContext model creating called");

            modelBuilder.Entity<Coordinate>(entity =>
            {
                //IndexBuilder class used to build indexes entity.HasIndex
                //PropertyBuilder class used to contain entity.Property

                entity.HasIndex(e => e.HotspotId).HasName("Coordinates_IX_FK_HotspotCoordinate");

                //auto generated version which was updated to the above format - kept as an example below for reference
                //entity.HasIndex(e => e.HotspotId, "Coordinates_IX_FK_HotspotCoordinate");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.HotspotId).HasColumnType("INT");

                entity.Property(e => e.X)
                    .HasColumnType("INT")
                    .HasColumnName("x");

                entity.Property(e => e.Y)
                    .HasColumnType("INT")
                    .HasColumnName("y");

                entity.HasOne(d => d.Hotspot).WithMany(p => p.Coordinates).HasForeignKey(d => d.HotspotId);
            });

            modelBuilder.Entity<Hotspot>(entity =>
            {
                entity.HasIndex(e => e.PlanId).HasName("Hotspots_IX_FK_PlanHotspot");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.Color).HasColumnType("INT");
                entity.Property(e => e.HasWarning).HasColumnType("bit");

                entity.Property(e => e.LinkViewId).HasColumnType("INT");

                // *Note: COLLATE NOCASE in Entity Framework, it ensures that any queries involving
                // this column will treat the strings as case-insensitive.
                entity.Property(e => e.Name)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.PlanId).HasColumnType("INT");

                entity.HasOne(d => d.Plan).WithMany(p => p.Hotspots).HasForeignKey(d => d.PlanId);
            });

            modelBuilder.Entity<Level>(entity =>
            {
                entity.HasIndex(e => e.PlanId).HasName("Levels_IX_FK_AreaLevel");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.Columns).HasColumnType("INT");
                entity.Property(e => e.Height).HasColumnType("INT");
                entity.Property(e => e.LevelNo).HasColumnType("INT");
                entity.Property(e => e.PlanId).HasColumnType("INT");
                entity.Property(e => e.Rows).HasColumnType("INT");
                entity.Property(e => e.Width).HasColumnType("INT");

                entity.HasOne(d => d.Plan).WithMany(p => p.Levels).HasForeignKey(d => d.PlanId);
            });

            modelBuilder.Entity<LinkZone>(entity =>
            {
                entity.HasIndex(e => e.HotspotId).HasName("LinkZones_IX_FK_HotspotLinkZone");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.HotspotId).HasColumnType("INT");
                entity.Property(e => e.ZoneNo).HasColumnType("INT");

                entity.HasOne(d => d.Hotspot).WithMany(p => p.LinkZones).HasForeignKey(d => d.HotspotId);
            });

            modelBuilder.Entity<Location>(entity =>
            {

                entity.HasIndex(e => e.LocationIdParent).HasName("Locations_IX_FK_LocationLocation");
                entity.HasIndex(e => e.SiteId).HasName("Locations_IX_FK_SiteBuilding");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.Description)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.LocationIdParent).HasColumnType("INT");

                entity.Property(e => e.Name)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.SiteId).HasColumnType("INT");

                entity.HasOne(d => d.LocationIdParentNavigation).WithMany(p => p.InverseLocationIdParentNavigation).HasForeignKey(d => d.LocationIdParent);

                entity.HasOne(d => d.Site).WithMany(p => p.Locations).HasForeignKey(d => d.SiteId);
            });

            modelBuilder.Entity<Plan>(entity =>
            {
                entity.HasIndex(e => e.LocationId).HasName("Plans_IX_FK_BuildingPlan");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.ImageFolderId).HasColumnType("INT");
                entity.Property(e => e.LinkViewId).HasColumnType("INT");
                entity.Property(e => e.LocationId).HasColumnType("INT");

                entity.Property(e => e.Name)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.ZoomLevelPreferred).HasColumnType("INT");

                entity.HasOne(d => d.Location).WithMany(p => p.Plans).HasForeignKey(d => d.LocationId);
            });

            modelBuilder.Entity<Site>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.Notes)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");
            });

            modelBuilder.Entity<View>(entity =>
            {
                entity.HasIndex(e => e.PlanId).HasName("Views_IX_FK_PlanView");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.Name)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.PlanId).HasColumnType("INT");

                entity.Property(e => e.X)
                    .HasColumnType("INT")
                    .HasColumnName("x");

                entity.Property(e => e.Y)
                    .HasColumnType("INT")
                    .HasColumnName("y");

                entity.Property(e => e.ZoomLevel).HasColumnType("INT");

                entity.HasOne(d => d.Plan).WithMany(p => p.Views).HasForeignKey(d => d.PlanId);
            });

            modelBuilder.Entity<Zone>(entity =>
            {
                entity.HasIndex(e => e.SiteId).HasName("Zones_IX_FK_SiteZone");

                entity.HasIndex(e => e.LinkViewId).HasName("Zones_IX_FK_ViewZone");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnType("INT");

                entity.Property(e => e.LinkViewId).HasColumnType("INT");

                entity.Property(e => e.Name)
                    .HasColumnType("nvarchar(4000) COLLATE NOCASE");

                entity.Property(e => e.SiteId).HasColumnType("INT");
                entity.Property(e => e.ZoneNo).HasColumnType("INT");

                entity.HasOne(d => d.LinkView).WithMany(p => p.Zones).HasForeignKey(d => d.LinkViewId);

                entity.HasOne(d => d.Site).WithMany(p => p.Zones)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            OnModelCreatingPartial(modelBuilder);
            Debug.WriteLine("SqliteDbContext model partial created");
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
